Step 1: Setting Up Your AWS Environment

1.1 Install AWS CLI

First, you need the AWS CLI installed on your machine. If you haven’t installed it yet, you can do so by following the instructions here.

1.2 Configure AWS CLI

After installing, configure the AWS CLI with your credentials:

aws configure
You’ll be prompted to enter your AWS Access Key ID, Secret Access Key, region, and output format.

1.3 Install kubectl

Next, you need to install kubectl, the Kubernetes command-line tool. You can find installation instructions here.

1.4 Install eksctl

Finally, install eksctl, a simple CLI tool for creating and managing EKS clusters. Instructions can be found here.

Step 2: Create an EKS Cluster

2.1 Create a Cluster

Use eksctl to create a new EKS cluster. This command creates a cluster named simple-cluster with two nodes:

eksctl create cluster --name simple-cluster --region us-west-2 --nodes 2
This process will take a few minutes. Once completed, your EKS cluster will be up and running.

Get Tamer Benhassan’s stories in your inbox
Join Medium for free to get updates from this writer.

Enter your email
Subscribe
2.2 Configure kubectl

To enable kubectl to interact with your new EKS cluster, you need to update the kubeconfig file:

aws eks --region us-west-2 update-kubeconfig --name simple-cluster
Step 3: Set Up IAM Roles for Your Application

3.1 Create IAM Policy

Create an IAM policy that allows the necessary permissions for your EKS nodes. Save the following policy in a file named eks-policy.json:

{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "ec2:Describe*",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
                "ecr:BatchCheckLayerAvailability",
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:DescribeLaunchConfigurations",
                "autoscaling:DescribeTags",
                "s3:ListBucket",
                "s3:GetObject"
            ],
            "Resource": "*"
        }
    ]
}
Create the policy using the AWS CLI:

aws iam create-policy --policy-name EKSNodePolicy --policy-document file://eks-policy.json
3.2 Create IAM Role

Create an IAM role for your EKS nodes and attach the policy:

aws iam create-role --role-name EKSNodeRole --assume-role-policy-document file://<(echo '{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Service": "ec2.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        }
    ]
}')
Attach the policy to the role:

aws iam attach-role-policy --role-name EKSNodeRole --policy-arn arn:aws:iam::<your-account-id>:policy/EKSNodePolicy
Step 4: Deploy a Simple Application

4.1 Create a Deployment

Create a simple deployment using kubectl. Here, we’ll deploy an Nginx server. Save the following YAML configuration in a file named nginx-deployment.yaml:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
Apply the deployment using kubectl:

kubectl apply -f nginx-deployment.yaml
4.2 Create a Service

To expose your Nginx application, create a Service. Save the following YAML configuration in a file named nginx-service.yaml:

apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer
Apply the service using kubectl:

kubectl apply -f nginx-service.yaml
4.3 Verify the Deployment

Get the list of services to find the external IP of your Nginx service:

kubectl get services
You should see an output like this:

NAME            TYPE           CLUSTER-IP       EXTERNAL-IP       PORT(S)        AGE
nginx-service   LoadBalancer   10.100.200.1     a1b2c3d4e5f6.us-west-2.elb.amazonaws.com   80:31724/TCP   5m
Access your application by opening the EXTERNAL-IP in your browser.

Conclusion

You’ve successfully deployed a simple application using Amazon EKS.
